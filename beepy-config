#!/bin/bash

INTERACTIVE=True
ASK_TO_REBOOT=0

USER=${SUDO_USER:-$(who -m | awk '{ print $1 }')}

APP_NAME="Beepy Config"
TITLE="$APP_NAME Setup"

CONFIG_DIR="$HOME/.config/beepy-config"
REPOS_DIR="$CONFIG_DIR/repos"

BASHRC_FILE=''
BEEPY_BASHRC_FILE=".bashrc.beepy"
BEEPY_BASHRC_FILE_BASE="$BEEPY_BASHRC_FILE.base"
BEEPY_BASHRC_FILE_DEST="$CONFIG_DIR/$BEEPY_BASHRC_FILE"

calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so suppress error
  # output from tput. However in this case, tput detects neither stdout or
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=18
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi

  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

do_find_existing_alias() {
  key=$1

  # Return 1 if found, 0 if not found
  grep -F "alias $key" $BEEPY_BASHRC_FILE

  return $?
}

do_find_existing_export() {
  key=$1

  # Return 1 if found, 0 if not found
  grep -F "export $key" $BEEPY_BASHRC_FILE

  return $?
}

do_add_alias() {
  key=$1
  value=$2

  do_remove_alias "$key"

  echo "alias $key='$value'" >> $BEEPY_BASHRC_FILE
}

do_remove_alias() {
  key=$1

  # Remove alias if found
  if do_find_existing_alias "$key"; then
    sed -i "/alias $key/d" $BEEPY_BASHRC_FILE
  fi
}

do_add_export() {
  key=$1
  value=$2

  do_remove_export "$key"

  echo "export $key='$value'" >> $BEEPY_BASHRC_FILE
}

do_remove_export() {
  key=$1

  # Remove export if found
  if do_find_existing_export "$key"; then
    sed -i "/export $key/d" $BEEPY_BASHRC_FILE
  fi
}

do_init() {
  echo "Initializing $TITLE..."

  # Directories for config files and git repos
  mkdir -p "$CONFIG_DIR" || true
  mkdir -p "$REPOS_DIR" || true

  # Check that a .bashrc or .bash_aliases file exists
  if [ -f "$HOME"/.bash_aliases ]
  then
      BASHRC_FILE="$HOME"/.bash_aliases
  elif [ -f "$HOME"/.bashrc ]
  then
      BASHRC_FILE="$HOME"/.bashrc
  else
      BASHRC_FILE=''
  fi

  # if .bashrc or .bash_aliases does not exist, exit
  if [[ ! $BASHRC_FILE ]]
  then
      echo "Cannot find .bashrc or .bash_aliases in $HOME directory. Please create one and run this script again."
      exit 1
  fi

  # Copy base dotfile for modification
  cp "$BEEPY_BASHRC_FILE_BASE" "$BEEPY_BASHRC_FILE"
}

do_final_install() {
  # Copy dotfile to home directory
  cp "$BEEPY_BASHRC_FILE" "$BEEPY_BASHRC_FILE_DEST"

  # Add dotfile to .bashrc
  INCLUDE_BASHRC_SOURCE="[[ -s \"$BEEPY_BASHRC_FILE_DEST\" ]] && source $BEEPY_BASHRC_FILE_DEST"
  ALREADY_EXISTS=$(tail -n 1 "$BASHRC_FILE")
  if [ "$ALREADY_EXISTS" == "$INCLUDE_BASHRC_SOURCE" ]
  then
      echo ""
  else
      echo "$INCLUDE_BASHRC_SOURCE" >> "$BASHRC_FILE"
  fi
}

do_finish() {
  do_final_install

  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
      sync
      reboot
    fi
  fi

  exit 0
}

do_hide_terminal_name() {
  do_add_export "PS1" "\w \$ "
}

do_invert_colors() {
  echo "echo -e '\033[?5h' > /dev/tty1" >> $BEEPY_BASHRC_FILE
}

do_improve_cat() {
  sudo apt-get install -y bat

  do_add_alias "cat" "batcat"
}

do_enable_zoom() {
  sh scripts/install_zoom

  do_add_alias "zi" "zoom in"
  do_add_alias "zo" "zoom out"
  do_add_alias "zr" "zoom"
}

do_enable_weather() {
  location=$1
  units=$2

  sh scripts/install_wx "$location" "$units"

  do_add_alias "weather" "wx"
}

do_enable_ppa() {
  sh scripts/enable_beepy_ppa
  ASK_TO_REBOOT=1
}

do_disable_ppa() {
  sh scripts/disable_beepy_ppa
  ASK_TO_REBOOT=1
}

do_install_fonts() {
  sh scripts/install_fonts
}

do_persist_font() {
  font=$1

  sh scripts/persist_font "$font"
}

do_set_font() {
  font=$1

  do_install_fonts

  sh scripts/set_font "$font"

  do_persist_font_prompt "$font"
}

do_preview_all_fonts() {
  do_install_fonts

  sh scripts/preview_terminus_fonts
}

do_install_reddit() {
  sudo apt-get install -y rtv

  do_add_alias "reddit" "rtv"
}

do_install_browser() {
  package=$1
  browser_command=$2

  sudo apt-get install -y "$package"

  do_add_alias "web" "$browser_command"
}

do_install_email_client() {
  package=$1
  email_client_command=$2

  sudo apt-get install -y "$package"

  do_add_alias "email" "$email_client_command"
}

do_browser_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "Which browser would you like to use?" 15 60 4 \
      "1" "lynx" \
      "2" "w3m" \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      # User made a selection
      case $CHOICE in
          1)
              do_install_browser "lynx" "lynx"
              ;;
          2)
              do_install_browser "w3m" "w3m"
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_apps_menu
  fi
}

do_email_client_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "Which email client would you like to use?" 15 60 4 \
      "1" "alpine" \
      "2" "neomutt" \
      "3" "aerc" \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      # User made a selection
      case $CHOICE in
          1)
              do_install_email_client "alpine" "alpine"
              ;;
          2)
              do_install_email_client "neomutt" "neomutt"
              ;;
          3)
              do_install_email_client "aerc" "aerc"
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_apps_menu
  fi
}

do_weather_menu() {
  LOCATION=$(whiptail --title "$TITLE" --inputbox "What is your location (nearest city)?" 15 60 3>&1 1>&2 2>&3)
  # Replace spaces with + in location
  LOCATION=${LOCATION// /+}

  CHOICE=$(whiptail --title "$TITLE" --radiolist "Which units would you like to use?" 15 60 4 \
            "1" "imperial" \
            "2" "metric" \
            3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      case $CHOICE in
          1)
              do_enable_weather "$LOCATION" "imperial"
              ;;
          2)
              do_enable_weather "$LOCATION" "metric"
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_apps_menu
  fi
}

do_password_manager_menu() {
  NAME=$(whiptail --title "$TITLE" --inputbox "What is your name?" 15 60 3>&1 1>&2 2>&3)

  EMAIL_ADDRESS=$(whiptail --title "$TITLE" --inputbox "What is your email address?" 15 60 3>&1 1>&2 2>&3)

  sh scripts/init_password_store "$NAME" "$EMAIL_ADDRESS"
}

do_apps_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "What would you like to do?" 15 60 4 \
      "1" "Set browser" \
      "2" "Set email client" \
      "3" "Set weather" \
      "4" "Install Reddit" \
      "5" "Set up password manager" \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      case $CHOICE in
          1)
              do_browser_menu
              ;;
          2)
              do_email_client_menu
              ;;
          3)
              do_weather_menu
              ;;
          4)
              do_install_reddit
              ;;
          5)
              do_password_manager_menu
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_main_menu
  fi
}

do_persist_font_prompt() {
  font=$1
  if (whiptail --title "$TITLE" --yesno "Would you like to keep this font?" 15 60 4 \
      3>&1 1>&2 2>&3); then
    do_persist_font "$font"
  fi
}

do_fonts_selection_menu() {
  CHOICE=$(whiptail --title "$TITLE" --radiolist "Which font size would you like to use?" 15 60 4 \
          "1" "12 regular" \
          "2" "12 bold" \
          "3" "14 regular" \
          "4" "14 bold" \
          "5" "16 regular" \
          "6" "16 bold" \
          "7" "18 regular" \
          "8" "18 bold" \
          "9" "20 regular" \
          "10" "20 bold" \
          "11" "22 regular" \
          "12" "22 bold" \
          "13" "24 regular" \
          "14" "24 bold" \
          "15" "28 regular" \
          "16" "28 bold" \
          "17" "32 regular" \
          "18" "32 bold" \
          3>&1 1>&2 2>&3)

      if [ $? -eq 0 ]; then
          case $CHOICE in
              1)
                  do_set_font "ter-powerline-v12n.psf.gz"
                  ;;
              2)
                  do_set_font "ter-powerline-v12b.psf.gz"
                  ;;
              3)
                  do_set_font "ter-powerline-v14n.psf.gz"
                  ;;
              4)
                  do_set_font "ter-powerline-v14b.psf.gz"
                  ;;
              5)
                  do_set_font "ter-powerline-v16n.psf.gz"
                  ;;
              6)
                  do_set_font "ter-powerline-v16b.psf.gz"
                  ;;
              7)
                  do_set_font "ter-powerline-v18n.psf.gz"
                  ;;
              8)
                  do_set_font "ter-powerline-v18b.psf.gz"
                  ;;
              9)
                  do_set_font "ter-powerline-v20n.psf.gz"
                  ;;
              10)
                  do_set_font "ter-powerline-v20b.psf.gz"
                  ;;
              11)
                  do_set_font "ter-powerline-v22n.psf.gz"
                  ;;
              12)
                  do_set_font "ter-powerline-v22b.psf.gz"
                  ;;
              13)
                  do_set_font "ter-powerline-v24n.psf.gz"
                  ;;
              14)
                  do_set_font "ter-powerline-v24b.psf.gz"
                  ;;
              15)
                  do_set_font "ter-powerline-v28n.psf.gz"
                  ;;
              16)
                  do_set_font "ter-powerline-v28b.psf.gz"
                  ;;
              17)
                  do_set_font "ter-powerline-v32n.psf.gz"
                  ;;
              18)
                  do_set_font "ter-powerline-v32b.psf.gz"
                  ;;
              *)
                  # This should never happen
                  whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
                  ;;
          esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
      else
          do_fonts_main_menu
      fi
}

do_fonts_main_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "What would you like to do?" 15 60 4 \
      "1" "Select font size" \
      "2" "Preview all fonts" \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      # User made a selection
      case $CHOICE in
          1)
              do_fonts_selection_menu
              ;;
          2)
              do_preview_all_fonts
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_display_menu
  fi
}


do_display_extras_menu() {
  OPTIONS=$(whiptail --separate-output --title "$TITLE" --checklist \
    "Which display extras would you like to enable?" 15 60 4 \
    "1" "Hide computer name to save space" OFF \
    "2" "Enable zoom" OFF \
    "3" "Invert colors" OFF \
    3>&1 1>&2 2>&3)

  if [ -z "$OPTIONS" ]; then
    do_display_menu
  else
    for option in $OPTIONS; do
      case "$option" in
        1)
          do_hide_terminal_name
          ;;
        2)
          do_enable_zoom
          ;;
        3)
          do_invert_colors
          ;;
        *)
          # This should never happen
          whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
          ;;
      esac || whiptail --msgbox "There was an error running option $option" 20 60 1
    done
  fi
}

do_display_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "What would you like to configure?" 15 60 4 \
        "1" "Fonts" \
        "2" "Extras" \
        3>&1 1>&2 2>&3)

    if [ $? -eq 0 ]; then
        case $CHOICE in
            1)
                do_fonts_main_menu
                ;;
            2)
                do_display_extras_menu
                ;;
            *)
                # This should never happen
                whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
                ;;
        esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
    else
        do_main_menu
    fi
}

do_beepy_ppa_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "What would you like to do?" 15 60 4 \
      "1" "Enable Beepy PPA" \
      "2" "Disable Beepy PPA" \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      case $CHOICE in
          1)
              do_enable_ppa
              ;;
          2)
              do_disable_ppa
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_extras_menu
  fi
}

do_extras_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "What would you like to do?" 15 60 4 \
      "1" "Enable/Disable Beepy PPA" \
      "2" "Improve cat" \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      case $CHOICE in
          1)
              do_beepy_ppa_menu
              ;;
          2)
              do_improve_cat
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_main_menu
  fi
}

do_main_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
          "Display" "Configure display" \
          "Apps" "Configure apps" \
          "Extras" "Configure extras" \
          3>&1 1>&2 2>&3)
      RET=$?
      if [ $RET -eq 1 ]; then
        do_finish
      elif [ $RET -eq 0 ]; then
        case "$CHOICE" in
          "Display") do_display_menu ;;
          "Apps") do_apps_menu ;;
          "Extras") do_extras_menu ;;
          *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
      else
        exit 1
      fi
}

#
# Interactive use loop
#
if [ "$INTERACTIVE" = True ]; then
  calc_wt_size
  do_init
  while [ "$USER" = "root" ] || [ -z "$USER" ]; do
    if ! USER=$(whiptail --inputbox "$APP_NAME could not determine the default user.\\n\\nWhat user should these settings apply to?" 20 60 pi 3>&1 1>&2 2>&3); then
      return 0
    fi
  done
  while true; do
    do_main_menu
  done
fi
