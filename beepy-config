#!/bin/bash

INTERACTIVE=True
ASK_TO_REBOOT=0

USER=${SUDO_USER:-$(who -m | awk '{ print $1 }')}

APP_NAME="Beepy Config"
TITLE="$APP_NAME Setup"

CONFIG_DIR="$HOME/.config/beepy-config"
SCRIPTS_DIR="$CONFIG_DIR/scripts"


############# App Functions ##############

##### Installing Scripts
do_install_script() {
  script_download_url=$1
  script_name=$(basename "$script_download_url")

  # Download script to SCRIPTS_DIR, overwriting if it already exists
  curl -o "$SCRIPTS_DIR/$script_name" "$script_download_url"

  # Make script executable
  chmod +x "$SCRIPTS_DIR/$script_name"
}

##### Beepy PPA
# Ref: https://ardangelo.github.io/beepy-ppa/#adding-to-apt-and-installing-drivers

PPA_LIST="/etc/apt/sources.list.d/beepy.list"
PPA_GPG="/etc/apt/trusted.gpg.d/beepy.gpg"

do_check_if_beepy_ppa_is_installed() {
    if [ -f "$PPA_LIST" ]; then
        return 0
    else
        return 1
    fi
}

do_enable_beepy_ppa() {
    curl -s --compressed "https://ardangelo.github.io/beepy-ppa/KEY.gpg" | gpg --dearmor | sudo tee "$PPA_GPG" >/dev/null || true
    sudo curl -s --compressed -o "$PPA_LIST" "https://ardangelo.github.io/beepy-ppa/beepy.list"
    sudo apt-get -y install beepy-kbd sharp-drm
}

do_disable_beepy_ppa() {
    sudo rm -f "$PPA_LIST"
    sudo rm -f "$PPA_GPG"
    sudo apt-get update
}


##### Beepy Bashrc
BEEPY_BASHRC_FILE_NAME=".bashrc.beepy"
BEEPY_BASHRC_FILE_PATH=""

do_confirm_bashrc_exists() {
  # Check that a .bashrc or .bash_aliases file exists
  if [ -f "$HOME"/.bash_aliases ]
  then
      BASHRC_FILE="$HOME"/.bash_aliases
  elif [ -f "$HOME"/.bashrc ]
  then
      BASHRC_FILE="$HOME"/.bashrc
  else
      BASHRC_FILE=''
  fi

  # if .bashrc or .bash_aliases does not exist, exit
  if [[ ! $BASHRC_FILE ]]
  then
      exit 1
  fi
}

do_setup_bashrc_beepy() {
  do_confirm_bashrc_exists || exit 1

  dest_path=$1

  BEEPY_BASHRC_FILE_PATH="$dest_path/$BEEPY_BASHRC_FILE_NAME"

  # Create .bashrc.beepy file if it doesn't exist
  if [ ! -f "$BEEPY_BASHRC_FILE_PATH" ]; then
      touch "$BEEPY_BASHRC_FILE_PATH"
  fi

  # Add dotfile to .bashrc
  INCLUDE_BASHRC_SOURCE="[[ -s \"$BEEPY_BASHRC_FILE_PATH\" ]] && source $BEEPY_BASHRC_FILE_PATH"
  ALREADY_EXISTS=$(tail -n 1 "$BASHRC_FILE")
  if [ "$ALREADY_EXISTS" == "$INCLUDE_BASHRC_SOURCE" ]
  then
      echo ""
  else
      echo "$INCLUDE_BASHRC_SOURCE" >> "$BASHRC_FILE"
  fi
}

do_bashrc_find_existing_alias() {
  key=$1

  # Return 1 if found, 0 if not found
  grep -F "alias $key" "$BEEPY_BASHRC_FILE_PATH"

  return $?
}

do_bashrc_find_existing_export() {
  key=$1

  # Return 1 if found, 0 if not found
  grep -F "export $key" "$BEEPY_BASHRC_FILE_PATH"

  return $?
}

do_bashrc_add_alias() {
  key=$1
  value=$2

  do_bashrc_remove_alias "$key"

  echo "alias $key='$value'" >> "$BEEPY_BASHRC_FILE_PATH"
}

do_bashrc_remove_alias() {
  key=$1

  # Remove alias if found
  if do_bashrc_find_existing_alias "$key"; then
    sed -i "/alias $key/d" "$BEEPY_BASHRC_FILE_PATH"
  fi
}

do_bashrc_add_export() {
  key=$1
  value=$2

  do_bashrc_remove_export "$key"

  echo "export $key='$value'" >> "$BEEPY_BASHRC_FILE_PATH"
}

do_bashrc_remove_export() {
  key=$1

  # Remove export if found
  if do_bashrc_find_existing_export "$key"; then
    sed -i "/export $key/d" "$BEEPY_BASHRC_FILE_PATH"
  fi
}

do_bashrc_add_line() {
  line=$1

  do_bashrc_remove_line "$line"

  echo "$line" >> "$BEEPY_BASHRC_FILE_PATH"
}

do_bashrc_remove_line() {
  line=$1

  # Remove line if found
  if grep -q "$line" "$BEEPY_BASHRC_FILE_PATH"; then
    sed -i "/$line/d" "$BEEPY_BASHRC_FILE_PATH"
  fi
}

do_bashrc_remove_line_by_regex_pattern() {
  pattern=$1

  # Remove line if found
  if grep -q "$pattern" "$BEEPY_BASHRC_FILE_PATH"; then
    sed -i "/$pattern/d" "$BEEPY_BASHRC_FILE_PATH"
  fi
}

do_bashrc_invert_colors() {
  do_bashrc_remove_line_by_regex_pattern " > \/dev\/tty1$"

  echo "echo -e '\033[?5l' > /dev/tty1" >> "$BEEPY_BASHRC_FILE_PATH"
}


##### Tmux Config
TMUX_CONFIG_FILE="$HOME/.tmux.conf"

do_ensure_tmux_conf_exists() {
    if [ ! -f "$TMUX_CONFIG_FILE" ]; then
        touch "$TMUX_CONFIG_FILE"
    fi
}

do_tmux_add_line() {
  line=$1

  do_tmux_remove_line "$line"

  echo "$line" >> "$TMUX_CONFIG_FILE"
}

do_tmux_remove_line() {
  line=$1

  # Remove line if found
  if grep -q "$line" "$TMUX_CONFIG_FILE"; then
    sed -i "/$line/d" "$TMUX_CONFIG_FILE"
  fi
}

do_tmux_remove_line_by_regex_pattern() {
  pattern=$1

  # Remove line if found
  if grep -q "$pattern" "$TMUX_CONFIG_FILE"; then
    sed -i "/$pattern/d" "$TMUX_CONFIG_FILE"
  fi
}

do_tmux_add_levels_to_status_bar() {
  do_ensure_tmux_conf_exists

  do_install_script "https://raw.githubusercontent.com/nwithan8/beepy-config/master/scripts/battery_level"
  do_install_script "https://raw.githubusercontent.com/nwithan8/beepy-config/master/scripts/wifi_strength"

  do_tmux_remove_line_by_regex_pattern "set -g status-right .*$"

  do_tmux_add_line "set -g status-right '#(sh $SCRIPTS_DIR/wifi_strength) #(sh $SCRIPTS_DIR/battery_level)'"
}

do_tmux_add_date_to_status_bar() {
  do_ensure_tmux_conf_exists

  do_tmux_remove_line_by_regex_pattern "set -g status-left .*$"

  do_tmux_add_line "set -g status-left \"#(date +'%I:%M%p') \""
}

do_tmux_move_status_bar() {
  do_ensure_tmux_conf_exists

  position=$1

  do_tmux_remove_line_by_regex_pattern "set -g status-position .*$"

  do_tmux_add_line "set -g status-position $position"
}

do_tmux_set_update_interval() {
  do_ensure_tmux_conf_exists

  interval=$1

  do_tmux_remove_line_by_regex_pattern "set -g status-interval .*$"

  do_tmux_add_line "set -g status-interval $interval"
}


##### Keyboard
# Ref: https://ardangelo.github.io/beepy-ppa/#adding-to-apt-and-installing-drivers

do_reload_keys() {
    sudo loadkeys /usr/share/kbd/keymaps/beepy-kbd.map
}

do_replace_key() {
  FIND=$1
  REPLACE=$2

  # Find FIND regex pattern in /usr/share/kbd/keymaps/beepy-kbd.map and replace with REPLACE
  sudo sed -i "s/$FIND/$REPLACE/" /usr/share/kbd/keymaps/beepy-kbd.map

  # Reload the keymap
  do_reload_keys
}

do_remap_beepy_button() {
    target=$1

    # Find "keycode 171 = .*$" in /usr/share/kbd/keymaps/beepy-kbd.map and replace with "keycode 171 = $target"
    do_replace_key "keycode 171 = .*" "keycode 171 = $target"
}

do_remap_control_beepy_button() {
    target=$1

    # Find "control keycode 171 = .*$" in /usr/share/kbd/keymaps/beepy-kbd.map and replace with "control keycode 171 = $target"
    do_replace_key "control keycode 171 = .*" "control keycode 171 = $target"
}

do_remap_back_button() {
    target=$1

    # Find "keycode 1 = .*$" in /usr/share/kbd/keymaps/beepy-kbd.map and replace with "keycode 1 = $target"
    do_replace_key "keycode 1 = .*" "keycode 1 = $target"
}

do_remap_control_back_button() {
    target=$1

    # Find "control keycode 1 = .*$" in /usr/share/kbd/keymaps/beepy-kbd.map and replace with "control keycode 1 = $target"
    do_replace_key "control keycode 1 = .*" "control keycode 1 = $target"
}


########### Main Functions ################

calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so suppress error
  # output from tput. However in this case, tput detects neither stdout or
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=18
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi

  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

do_get_on_off_option() {
  boolean=$1

  if [ "$boolean" -eq 1 ]; then
    echo "ON"
  else
    echo "OFF"
  fi
}

do_init() {
  do_setup_bashrc_beepy "$CONFIG_DIR" || whiptail --msgbox "No .bashrc or .bash_aliases file found.\\n\\nPlease create one and run this script again." 20 60 2
}

do_finish() {
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
      sync
      reboot
    fi
  fi

  exit 0
}

do_hide_terminal_name() {
  do_bashrc_add_export "PS1" "\w \$ "
}

do_improve_cat() {
  sudo apt-get install -y bat

  do_bashrc_add_alias "cat" "batcat"
}

do_enable_battery_saver() {
  # Disable HDMI
  # sudo /usr/bin/tvservice -o
  # echo "/usr/bin/tvservice -o" >> /etc/rc.local

  # Disable ACT led
  echo 0 | sudo tee /sys/class/leds/ACT/brightness
  echo none | sudo tee /sys/class/leds/ACT/trigger
  echo "echo 0 | sudo tee /sys/class/leds/ACT/brightness" >> /etc/rc.local
  echo "echo none | sudo tee /sys/class/leds/ACT/trigger" >> /etc/rc.local
}

do_enable_zoom() {
  # Download file to /usr/local/bin/zoom
  curl -s https://raw.githubusercontent.com/ardangelo/beepy-addons/mainline/zoom.sh | sudo tee /usr/local/bin/zoom >/dev/null || true
  sudo chmod +x /usr/local/bin/zoom

  do_bashrc_add_alias "zi" "zoom in"
  do_bashrc_add_alias "zo" "zoom out"
  do_bashrc_add_alias "zr" "zoom"
}

do_enable_weather() {
  location=$1
  units=$2

  # Download file to /usr/local/bin/wx
  curl -s https://github.com/k5njm/beepy-hacks/raw/mainline/scripts/wx | sudo tee /usr/local/bin/wx >/dev/null || true
  sudo chmod +x /usr/local/bin/wx
  do_add_alias "weather" "wx"

  # Set/reset up config file
  WX_CONFIG_FILE="$HOME/.config/weather.cfg"
  rm -f "$WX_CONFIG_FILE"
  touch "$WX_CONFIG_FILE"
  echo "location=$location" > "$WX_CONFIG_FILE"
  echo "units=$units" >> "$WX_CONFIG_FILE"

  do_bashrc_add_alias "weather" "wx"
}

do_install_fonts() {
  # Ref: https://github.com/k5njm/beepy-hacks/blob/mainline/fonts.md
  if ! dpkg -s console-setup >/dev/null 2>&1; then
    sudo apt-get install console-setup kbd
  fi

  # Download Terminus fonts if git repo not already cloned
  if [ ! -d "$REPOS_DIR"/fonts ]; then
    echo "Downloading Terminus fonts..."
    git clone https://github.com/powerline/fonts.git "$REPOS_DIR" || true
  fi

  sudo cp "$REPOS_DIR"/fonts/Terminus/PSF/*.gz /usr/share/consolefonts/
}

do_persist_font() {
  font=$1

  # Persist font setting by replacing FONT in /etc/default/console-setup
  sudo sed -i "s/^FONT=.*/FONT=\"$font\"/" /etc/default/console-setup
  sudo update-initramfs -u
}

do_set_font() {
  font=$1

  do_install_fonts

  sudo setfont /usr/share/consolefonts/"$font"

  do_persist_font_prompt "$font"
}

do_preview_all_fonts() {
  do_install_fonts

  for font in /usr/share/consolefonts/ter-powerline-v*;
    do
      font_name=$(echo "$font" | sed -e 's/\/usr\/share\/consolefonts\/ter-powerline-v\([0-9]*\)\(n\|b\).psf.gz/\1 \2/')
      sudo setfont $font;
      sleep 3;
      echo "| $font_name | `tput cols`x`tput lines` |";
      sleep 1;
    done
}

do_install_reddit() {
  sudo apt-get install -y rtv

  do_bashrc_add_alias "reddit" "rtv"
}

do_install_browser() {
  package=$1
  browser_command=$2

  sudo apt-get install -y "$package"

  do_bashrc_add_alias "web" "$browser_command"
}

do_install_email_client() {
  package=$1
  email_client_command=$2

  sudo apt-get install -y "$package"

  do_bashrc_add_alias "email" "$email_client_command"
}

do_install_rss_reader() {
  package=$1
  rss_reader_command=$2

  sh "$SCRIPTS_DIR/install_rss" "$package"

  if [ -z "$package" ]; then
      echo "Usage: $0 <reader>"
      exit 1
  fi

  case $package in
      "newsboat")
          sudo apt-get install -y newsboat
          ;;
      # "nom")
      #    # TODO: Won't work on ARM despite downloading the ARM binary
      #    curl -sL $(curl -s https://api.github.com/repos/guyfedwards/nom/releases/latest | grep browser_download_url | cut -d\" -f4 | egrep 'Linux_x86_64.tar.gz$') -o /tmp/nom.tar.gz && \
      #    tar -xzf /tmp/nom.tar.gz -C /tmp && \
      #    sudo mv /tmp/nom /usr/local/bin/nom && \
      #    rm /tmp/nom.tar.gz
      #    ;;
      *)
          echo "Invalid RSS reader"
          exit 1
          ;;
  esac

  do_bashrc_add_alias "rss" "$rss_reader_command"
}

do_browser_menu() {
  CHOICE=$(whiptail --title "$TITLE" --radiolist "Which browser would you like to use?" 15 60 4 \
      "1" "lynx" ON \
      "2" "w3m" OFF \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      # User made a selection
      case $CHOICE in
          1)
              do_install_browser "lynx" "lynx"
              ;;
          2)
              do_install_browser "w3m" "w3m"
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_apps_menu
  fi
}

do_email_client_menu() {
  CHOICE=$(whiptail --title "$TITLE" --radiolist "Which email client would you like to use?" 15 60 4 \
      "1" "neomutt" ON \
      "2" "alpine" OFF \
      "3" "aerc" OFF \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      # User made a selection
      case $CHOICE in
          1)
              do_install_email_client "neomutt" "neomutt"
              ;;
          2)

              do_install_email_client "alpine" "alpine"
              ;;
          3)
              do_install_email_client "aerc" "aerc"
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_apps_menu
  fi
}

do_rss_populate_prompt() {
  reader=$1

  if (whiptail --title "$TITLE" --yesno "Would you like to populate $reader with some common news feeds?" 15 60 4 \
      3>&1 1>&2 2>&3); then
    curl -s "https://raw.githubusercontent.com/nwithan8/beepy-config/master/scripts/populate_rss_reader" | bash -s -- "$reader" # This NEEDs to run as bash, not sh
  fi
}

do_rss_reader_menu() {
  CHOICE=$(whiptail --title "$TITLE" --radiolist "Which RSS reader would you like to use?" 15 60 4 \
      "1" "newsboat" ON \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      # User made a selection
      case $CHOICE in
          1)
              do_install_rss_reader "newsboat" "newsboat"
              do_rss_populate_prompt "newsboat"
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_apps_menu
  fi
}

do_weather_menu() {
  LOCATION=$(whiptail --title "$TITLE" --inputbox "What is your location (nearest city)?" 15 60 3>&1 1>&2 2>&3)
  # Replace spaces with + in location
  LOCATION=${LOCATION// /+}

  CHOICE=$(whiptail --title "$TITLE" --radiolist "Which units would you like to use?" 15 60 4 \
            "1" "imperial" ON \
            "2" "metric" OFF \
            3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      case $CHOICE in
          1)
              do_enable_weather "$LOCATION" "imperial"
              ;;
          2)
              do_enable_weather "$LOCATION" "metric"
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_apps_menu
  fi
}

do_password_manager_menu() {
  NAME=$(whiptail --title "$TITLE" --inputbox "What is your name?" 15 60 3>&1 1>&2 2>&3)

  EMAIL_ADDRESS=$(whiptail --title "$TITLE" --inputbox "What is your email address?" 15 60 3>&1 1>&2 2>&3)

  # Set up password store if not already set up
  sudo apt-get install pass git
  if [ ! -d "$HOME"/.password-store ]
  then
        # Generate GPG key
        gpg --full-gen-key --batch <(echo "Key-Type: 1"; \
                                         echo "Key-Length: 4096"; \
                                         echo "Subkey-Type: 1"; \
                                         echo "Subkey-Length: 4096"; \
                                         echo "Expire-Date: 0"; \
                                         echo "Name-Real: $NAME"; \
                                         echo "Name-Email: $EMAIL_ADDRESS"; \
                                         echo "%no-protection"; )

        # Get the Key ID of the key we just generated
        KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep -E "^sec" | tail -n 1 | awk '{print $2}' | awk -F'/' '{print $2}')

        # Initialize password store
        pass init "$KEY_ID"

        # Set up git config for password store
        pass git init
        cd "$HOME"/.password-store/.git || exit
        git config user.name "$NAME"
        git config user.email "$EMAIL_ADDRESS"
  fi
}

do_apps_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "What would you like to do?" 15 60 4 \
      "1" "Set browser" \
      "2" "Set email client" \
      "3" "Set RSS reader" \
      "4" "Set weather" \
      "5" "Install Reddit" \
      "6" "Set up password manager" \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      case $CHOICE in
          1)
              do_browser_menu
              ;;
          2)
              do_email_client_menu
              ;;
          3)
              do_rss_reader_menu
              ;;
          4)
              do_weather_menu
              ;;
          5)
              do_install_reddit
              ;;
          6)
              do_password_manager_menu
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_main_menu
  fi
}

do_persist_font_prompt() {
  font=$1
  if (whiptail --title "$TITLE" --yesno "Would you like to keep this font?" 15 60 4 \
      3>&1 1>&2 2>&3); then
    do_persist_font "$font"
  fi
}

do_fonts_selection_menu() {
  CHOICE=$(whiptail --title "$TITLE" --radiolist "Which font size would you like to use?" 15 60 4 \
          "1" "12 regular" \
          "2" "12 bold" \
          "3" "14 regular" \
          "4" "14 bold" \
          "5" "16 regular" \
          "6" "16 bold" \
          "7" "18 regular" \
          "8" "18 bold" \
          "9" "20 regular" \
          "10" "20 bold" \
          "11" "22 regular" \
          "12" "22 bold" \
          "13" "24 regular" \
          "14" "24 bold" \
          "15" "28 regular" \
          "16" "28 bold" \
          "17" "32 regular" \
          "18" "32 bold" \
          3>&1 1>&2 2>&3)

      if [ $? -eq 0 ]; then
          case $CHOICE in
              1)
                  do_set_font "ter-powerline-v12n.psf.gz"
                  ;;
              2)
                  do_set_font "ter-powerline-v12b.psf.gz"
                  ;;
              3)
                  do_set_font "ter-powerline-v14n.psf.gz"
                  ;;
              4)
                  do_set_font "ter-powerline-v14b.psf.gz"
                  ;;
              5)
                  do_set_font "ter-powerline-v16n.psf.gz"
                  ;;
              6)
                  do_set_font "ter-powerline-v16b.psf.gz"
                  ;;
              7)
                  do_set_font "ter-powerline-v18n.psf.gz"
                  ;;
              8)
                  do_set_font "ter-powerline-v18b.psf.gz"
                  ;;
              9)
                  do_set_font "ter-powerline-v20n.psf.gz"
                  ;;
              10)
                  do_set_font "ter-powerline-v20b.psf.gz"
                  ;;
              11)
                  do_set_font "ter-powerline-v22n.psf.gz"
                  ;;
              12)
                  do_set_font "ter-powerline-v22b.psf.gz"
                  ;;
              13)
                  do_set_font "ter-powerline-v24n.psf.gz"
                  ;;
              14)
                  do_set_font "ter-powerline-v24b.psf.gz"
                  ;;
              15)
                  do_set_font "ter-powerline-v28n.psf.gz"
                  ;;
              16)
                  do_set_font "ter-powerline-v28b.psf.gz"
                  ;;
              17)
                  do_set_font "ter-powerline-v32n.psf.gz"
                  ;;
              18)
                  do_set_font "ter-powerline-v32b.psf.gz"
                  ;;
              *)
                  # This should never happen
                  whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
                  ;;
          esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
      else
          do_fonts_main_menu
      fi
}

do_fonts_main_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "What would you like to do?" 15 60 4 \
      "1" "Select font size" \
      "2" "Preview all fonts" \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      # User made a selection
      case $CHOICE in
          1)
              do_fonts_selection_menu
              ;;
          2)
              do_preview_all_fonts
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_display_menu
  fi
}


do_display_extras_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu \
    "What would you like to configure?" 15 60 4 \
    "1" "Hide computer name to save space" \
    "2" "Enable zoom" \
    "3" "Invert colors" \
    3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
          case $CHOICE in
              1)
                  do_hide_terminal_name
                  ;;
              2)
                  do_enable_zoom
                  ;;
              3)
                  do_bashrc_invert_colors
                  ;;
              *)
                  # This should never happen
                  whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
                  ;;
          esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
    do_display_menu
  fi
}

do_display_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "What would you like to configure?" 15 60 4 \
        "1" "Fonts" \
        "2" "Extras" \
        3>&1 1>&2 2>&3)

    if [ $? -eq 0 ]; then
        case $CHOICE in
            1)
                do_fonts_main_menu
                ;;
            2)
                do_display_extras_menu
                ;;
            *)
                # This should never happen
                whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
                ;;
        esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
    else
        do_main_menu
    fi
}

do_keyboard_remap_beepy_button_menu() {
  CHOICE=$(whiptail --title "$TITLE" --radiolist "Which key would you like the Beepy button to simulate?" 15 60 4 \
      "1" "tmux command" ON \
      "2" "Esc" OFF \
      "3" "q" OFF \
      "4" "Tab" OFF \
      "5" "Vim command" OFF \
      "6" "Cut" OFF \
      "7" "Copy" OFF \
      "8" "Paste" OFF \
      "9" "Where am I?" OFF \
      "10" "List files" OFF \
      "11" "Log out" OFF \
      "12" "Exit" OFF \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      case $CHOICE in
          1)
              do_remap_beepy_button "Control_b"
              ;;
          2)
              do_remap_beepy_button "Escape"
              ;;
          3)
              do_remap_beepy_button "q"
              ;;
          4)
              do_remap_beepy_button "Tab"
              ;;
          5)
              do_remap_beepy_button "Meta_colon"
              ;;
          6)
              do_remap_beepy_button "Control_x"
              ;;
          7)
              do_remap_beepy_button "Control_c"
              ;;
          8)
              do_remap_beepy_button "Control_v"
              ;;
          9)
              do_remap_beepy_button "F44"
              ;;
          10)
              do_remap_beepy_button "F46"
              ;;
          11)
              do_remap_beepy_button "Incr_Console"
              ;;
          12)
              do_remap_beepy_button "F45"
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_keyboard_menu
  fi
}

do_keyboard_menu() {
  if ! do_check_if_beepy_ppa_is_installed; then
    whiptail --msgbox "Please enable the Beepy PPA first." 20 60 1
    do_beepy_ppa_menu
  fi

  CHOICE=$(whiptail --title "$TITLE" --menu "What would you like to do?" 15 60 4 \
      "1" "Remap Beepy button" \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      case $CHOICE in
          1)
              do_keyboard_remap_beepy_button_menu
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_main_menu
  fi
}

do_tmux_status_bar_location_menu() {
  CHOICE=$(whiptail --title "$TITLE" --radiolist "Where would you like to display the status bar?" 15 60 4 \
      "1" "Top" ON \
      "2" "Bottom" OFF \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      case $CHOICE in
          1)
              do_tmux_move_status_bar "top"
              ;;
          2)
              do_tmux_move_status_bar "bottom"
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_customize_tmux_menu
  fi
}

do_tmux_change_status_update_interval_menu() {
  INTERVAL=$(whiptail --title "$TITLE" --inputbox "How often would you like to update the status bar (in seconds)?" 15 60 3>&1 1>&2 2>&3)

  do_tmux_set_update_interval "$INTERVAL"
}

do_customize_tmux_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "What would you like to do?" 15 60 4 \
        "1" "Display battery and WiFi strength" \
        "2" "Display date" \
        "3" "Move status bar" \
        "4" "Change status update interval" \
        3>&1 1>&2 2>&3)

    if [ $? -eq 0 ]; then
        case $CHOICE in
            1)
                do_tmux_add_levels_to_status_bar
                ;;
            2)
                do_tmux_add_date_to_status_bar
                ;;
            3)
                do_tmux_status_bar_location_menu
                ;;
            4)
                do_tmux_change_status_update_interval_menu
                ;;
            *)
                # This should never happen
                whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
                ;;
        esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
    else
        do_extras_menu
    fi
}

do_extras_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "What would you like to do?" 15 60 4 \
      "1" "Improve cat" \
      "2" "Customize tmux" \
      "3" "Save battery" \
      3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
      case $CHOICE in
          1)
              do_improve_cat
              ;;
          2)
              do_customize_tmux_menu
              ;;
          3)
              do_enable_battery_saver
              ;;
          *)
              # This should never happen
              whiptail --msgbox "Programmer error: unrecognized option" 20 60 1
              ;;
      esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
  else
      do_main_menu
  fi
}

do_main_menu() {
  CHOICE=$(whiptail --title "$TITLE" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
          "Display" "Configure display" \
          "Keyboard" "Configure keyboard" \
          "Apps" "Configure apps" \
          "Extras" "Configure extras" \
          3>&1 1>&2 2>&3)
      RET=$?
      if [ $RET -eq 1 ]; then
        do_finish
      elif [ $RET -eq 0 ]; then
        case "$CHOICE" in
          "Display") do_display_menu ;;
          "Keyboard") do_keyboard_menu ;;
          "Apps") do_apps_menu ;;
          "Extras") do_extras_menu ;;
          *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $CHOICE" 20 60 1
      else
        exit 1
      fi
}

do_driver_install_prompt() {
  # Prompt yes/no to install dependencies
  if (whiptail --title "$TITLE" --yesno "Would you like to install $APP_NAME dependencies? This will cause your device to reboot." 15 60 4 \
      3>&1 1>&2 2>&3); then
    whiptail --msgbox "Installing $APP_NAME dependencies. Please enter your superuser password when prompted." 20 60 1
    curl -s "https://raw.githubusercontent.com/nwithan8/beepy-config/master/scripts/install_beepy_drivers" | bash
  fi
}

do_check_dependencies_are_installed() {
  # if PPA is not installed or sharp-drm is not installed
  if ! do_check_if_beepy_ppa_is_installed || ! dpkg -s sharp-drm >/dev/null 2>&1; then
    whiptail --msgbox "This device is missing required drivers.\\n\\nPlease install them first." 20 60 1
    do_driver_install_prompt
  fi

  # If beepy-kbd.map is not installed
  if [ ! -f /usr/share/kbd/keymaps/beepy-kbd.map ]; then
    whiptail --msgbox "Beepy-config is missing required dependencies. Installing..." 20 60 1
    curl -s https://raw.githubusercontent.com/nwithan8/beepy-config/master/scripts/install_beepy_config | bash
  fi
}

#
# Interactive use loop
#
if [ "$INTERACTIVE" = True ]; then
  calc_wt_size
  do_check_dependencies_are_installed
  do_init
  while [ "$USER" = "root" ] || [ -z "$USER" ]; do
    if ! USER=$(whiptail --inputbox "$APP_NAME could not determine the default user.\\n\\nWhat user should these settings apply to?" 20 60 pi 3>&1 1>&2 2>&3); then
      return 0
    fi
  done
  while true; do
    do_main_menu
  done
fi
